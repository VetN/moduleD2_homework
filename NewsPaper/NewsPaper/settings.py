"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""


#from decouple import config,Csv,RepositoryEnv
from pathlib import Path, os
import logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-7q3l)wy)*c4&w((&dq1u=1=-m#m4-%^kmg)y-jc1enjo9wl9^k'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# настройка для allauch пишем сами 
AUTHENTICATION_BACKENDS = [
   # Needed to login by username in Django admin, regardless of `allauth`
   'django.contrib.auth.backends.ModelBackend',
  
   # `allauth` specific authentication methods, such as login by e-mail
   'allauth.account.auth_backends.AuthenticationBackend',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

     

    'django_apscheduler',
    'django_filters',

    'django.contrib.sites',
	'django.contrib.flatpages',

    'news.apps.NewsConfig',# если делать отдельный файл signals надо указать не имя нашего приложения, а его конфиг, чтобы всё заработало 

    #'news', если включаем сигналы в отдельном файле и прописываем их 'news.apps.NewsConfig'
    'accounts',
    'static',
    'mail',

    'sign',
    'protect',

    'allauth',
    'allauth.account',
    # регистрация через соцсети
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    #'allauth.socialaccount.providers.vk',
    'allauth.socialaccount.providers.yandex',
    #'allauth.socialaccount.providers.odnoklassniki',
   #
   # 'django_apscheduler',
    
]
# встроенные слои django менять порядок нельзя! прежде чем ставить изучить порядок
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware', # один из главных промежуточных слоев, потому что он реализует различные проверки безопасности — XSS, nosniff, HSTS, CORS, поддержка SSL и т. д.
    'django.contrib.sessions.middleware.SessionMiddleware',     # Включает механизм сессий в разрабатываемом приложении.
    'django.middleware.common.CommonMiddleware', # #Рекомендуемый для использования во всех Django-проектах стандартные процедуры над URL (приведение к единому шаблону с учетом слэшей и www в начале)
    'django.middleware.csrf.CsrfViewMiddleware', # Включает проверку безопасности от угроз типа CSRF.

    'django.contrib.auth.middleware.AuthenticationMiddleware',      #Реализует основы аутентификации и идентификации
    'django.contrib.messages.middleware.MessageMiddleware',     #Включает поддержку сообщений, лежащих в основе работы с куки и сессиями
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

        # добавили для кеширования всего сайта целиком
    #'django.middleware.cache.UpdateCacheMiddleware',       #кэширование сайта на стороне клиента
    #'django.middleware.cache.FetchFromCacheMiddleware',    #кэширование сайта на стороне клиента

    'allauth.account.middleware.AccountMiddleware',



]

ROOT_URLCONF = 'NewsPaper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'NewsPaper.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

SITE_ID = 1
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / "static"]



# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


MEDIA_ROOT = os.path.join(BASE_DIR ,'media/')
MEDIA_URL = '/media/'


#LOGIN_URL = '/sign/login/'
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'

# регистрация/ авторизация по почте
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True #
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION =   'mandatory'# 'none'  отправление подтверждения на почту при регистрации прописываем
#ACCOUNT_CONFIRM_EMAIL_ON_GET = True позволит избежать дополнительных действий и активирует аккаунт сразу, как только мы перейдём по ссылке
#ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS — количество дней, в течение которых будет доступна ссылка на подтверждение регистрации

# для изменение формы signup надо переписать путь
ACCOUNT_FORMS = {'signup': 'news.forms.CommonSignupForm',
                 
                 'login': 'news.forms.CommonLoginForm'}

# для почты и рассылок

EMAIL_HOST = 'smtp.yandex.ru' # адрес сервера Яндекс-почты для всех один и тот же
EMAIL_PORT = 465 # порт smtp сервера тоже одинаковый
EMAIL_HOST_USER = 'vet.ness@yandex.ru' # ваше имя пользователя, например если ваша почта user@yandex.ru, то сюда надо писать user, иными словами, это всё то что идёт до собаки
EMAIL_HOST_PASSWORD = ''
EMAIL_USE_SSL = True # Яндекс использует ssl, подробнее о том, что это, почитайте на Википедии, но включать его здесь обязательно


#ADMINS = [
   # ('имя', 'petechka@yandex.ru'),  список всех админов в формате ('имя', 'их почта')
#]
SERVER_EMAIL = EMAIL_HOST_USER
EMAIL_ADMIN = EMAIL_HOST_USER
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER #  проверка при регистрации строчка прописываемздесь указываем уже свою ПОЛНУЮ почту с которой будут отправляться письма 
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' #- вкл этой строчки пойдет письмо в консоль

# настройки для django_apscheduler
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"  # формат даты, которую будет воспринимать наш задачник
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # если задача не выполняется за 25 секунд, то она автоматически снимается,

# Указываем, куда будем сохранять кэшируемые файлы! 
# Не забываем создать папку cache_files внутри папки с manage.py!
#CACHES = {
   # 'default': {
       #'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
       # 'LOCATION': os.path.join(BASE_DIR, 'cache_files'), 
        #'TIMEOUT': 30, # добавляем стандартное время ожидания в минуту (по умолчанию это 5 минут — 300 секунд)
   # }
#}
ADMINS = (
    ('admin', 'vet.ness@yandex.ru'),
)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '{asctime} - {levelname} - {message}',
            'style': '{', 
            },
        'simple_mes': {
            'format': '{asctime} - {levelname} -{module} - {message}',
            'style': '{', 
            },
        'warning': {
            'format': '{asctime} - {levelname} -{pathname} - {message}',
            'style': '{', 
            },
        'error': {
            'format': '{asctime} - {levelname} -{pathname} - {message} - {exc_info}',
            'style': '{', 
            },
        
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    # куда идут логи  в каком формате- обработчик
    'handlers': {
        'console': {
            'level': 'DEBUG',
           'filters': ['require_debug_false'],
            'class': 'logging.StreamHandler',
            'formatter': 'console'
        },
        'general': {
            'level': 'INFO',
            'filters': ['require_debug_false'], 
            'class': 'logging.FileHandler',
            'formatter': 'simple_mes',
            'filename': 'logs/general.log'
        },
        'error': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'formatter': 'error',
            'filename': 'logs/errors.log'
        },
        'security': {
            'class': 'logging.FileHandler',
            'formatter': 'simple_mes',
            'filename': 'logs/security.log'
        },
        'email': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],  
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'warning',
        },
    },
    # объект для логирования
    'loggers': {
        'django': {
            'handlers': ['console', 'general'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['error', 'email'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['error', 'email'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.template': {
            'handlers': ['error'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['error'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.security': {
            'handlers': ['security'],
            'propagate': True,
        },
    }
}